generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String        @default("user")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  chatSessions  ChatSession[]
  sessions      Session[]
  tickets       Ticket[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Customer {
  id           String        @id @default(cuid())
  name         String
  email        String
  phone        String?
  company      String?
  avatar       String?
  status       String        @default("active")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  lastLogin    DateTime?
  preferences  Json?
  chatSessions ChatSession[]
  tickets      Ticket[]
}

model Ticket {
  id              String        @id @default(cuid())
  title           String
  description     String
  status          String        @default("open")
  priority        String        @default("medium")
  category        String
  tags            String[]
  customerId      String
  assignedAgentId String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  resolvedAt      DateTime?
  dueDate         DateTime?
  slaHours        Int
  satisfaction    Int?
  source          String
  metadata        Json?
  chatSessions    ChatSession[]
  agent           User?         @relation(fields: [assignedAgentId], references: [id])
  customer        Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model ChatSession {
  id         String        @id @default(cuid())
  ticketId   String?
  customerId String
  agentId    String?
  status     String        @default("active")
  priority   String        @default("medium")
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  endedAt    DateTime?
  rating     Int?
  feedback   String?
  messages   ChatMessage[]
  agent      User?         @relation(fields: [agentId], references: [id])
  customer   Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  ticket     Ticket?       @relation(fields: [ticketId], references: [id])
}

model ChatMessage {
  id         String      @id @default(cuid())
  sessionId  String
  senderId   String
  senderType String
  content    String
  type       String      @default("text")
  timestamp  DateTime    @default(now())
  metadata   Json?
  read       Boolean     @default(false)
  edited     Boolean     @default(false)
  editedAt   DateTime?
  session    ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model AnalyticsData {
  id      String   @id @default(cuid())
  date    DateTime
  metrics Json
  trends  Json
}
